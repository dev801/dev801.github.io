{
    "posts": [
        {
            "number": "",
            "date": "",
            "title": "Nerd Page",
            "content": "This is the nerd page. Otherwise known as the code page. I'll post code for finished projects here, and the occasional random programming thing (normally rants ðŸ˜…)."
        },
		{
			"number": "#3",
			"date": "13/11/2020",
			"title": "Making a game thing in Processing 3",
			"content": "This <i>may</i> be a bit longer than the other posts on here. Essentially, I made a thing and never finished it, but am kind of happy with the point it got to. I managed to make a game-making thing in <a href=\"https://www.processing.org\">Processing 3</a>. It lets you create menus fully with the use of custom classes, as well as handles user input, character controlling stuff and map creation/rendering/editing. It's a pretty simple system - you have a set scenes. You can trigger switches between scenes at any time you want. Scenes are indexed and stored in an array in a GameHandler object. These scenes are made up of 2 other types of custom objects - Maps and Menus. The names pretty much explain everything you need to know about what these are - Menus are buttons and blocks of text that can be drawn to the screen, and Maps are the actual thing the player plays the game in. Both of these types of objects have render functions, and these return PImages of themselves, however the rendering process is automatically handled by the GameHandler. The stupid amount of custom classes and functions that exist make creating menus pretty easy - for example, this code creates a full start menu:<br><kbd>Menu&nbsp;mainMenuMenu&nbsp;=&nbsp;<span style=\"color: #33997E;\">new</span> Menu();<br>mainMenuMenu.setTitle(<span style=\"color: #7D4793;\">&quot;Faith&quot;</span>).setBGColour(#000000).setTextColour(#ffffff);<br>Button&nbsp;playButton&nbsp;=&nbsp;<span style=\"color: #33997E;\">new</span> Button().setText(<span style=\"color: #7D4793;\">&quot;Play&quot;</span>).setBGColour(#111111).setLocation(800, 350).setSize(500, 110).setTextOffset(0, -20).setDestination(<span style=\"color: #33997E;\">new</span> <span style=\"color: #E2661A;\">int</span>[] {OPENING_SCENE, 0});<br>mainMenuMenu.addButton(playButton);<br>Button&nbsp;howToPlayButton&nbsp;=&nbsp;<span style=\"color: #33997E;\">new</span> Button().setText(<span style=\"color: #7D4793;\">&quot;How to Play&quot;</span>).setBGColour(#111111).setLocation(800, 475).setSize(500, 110).setTextOffset(0, -20).setDestination(toDestination(0, 1));<br>mainMenuMenu.addButton(howToPlayButton);<br>Button&nbsp;quitButton&nbsp;=&nbsp;<span style=\"color: #33997E;\">new</span> Button().setText(<span style=\"color: #7D4793;\">&quot;Quit&quot;</span>).setBGColour(#111111).setLocation(800, 600).setSize(500, 110).setTextOffset(0, -20).setDestination(<span style=\"color: #33997E;\">new</span> <span style=\"color: #E2661A;\">int</span>[] {QUIT, 0});<br>mainMenuMenu.addButton(quitButton);</kbd><br>As you can see, there is literaly no normal Processing code in that - it's pretty much all custom classes. That code (of course plus all the stuff I've written in the background to make it actually work) produces a menu like this:<br><img src=\"images/13.11.20/menu.png\" style=\"max-width: 100%; min-width: 50%; margin-top: 5px;\"><br>(don't question the title and all that, this was originally a project for a challenge that I didn't quite manage to finish...) Something you may notice is that the coordinates the buttons are set to be drawn at are all pre-defined values - you may be thinking that it's an awful idea and makes everything unresizeable, but you'd be wrong. I spent way too long making sure the entire thing was resizeable. Essentially, all coordinates that things such as buttons are given are given as they would be if the screen was exactly 1600x900 pixels. I then do some weird maths to these values so that they end up stretched across whatever the window size actually is. I then do some further weird maths to constrain everything that is drawn to the screen to a 16:9 area in the centre of the window. Was this excessive? Probably. But it works! <strike>And is probably really underwhelming to people who don't know how annoying this is to do!</strike><br>Anyway, that's enough of the menus, onto the maps. Every map can have a custom tileset, and how this tileset is used is defined by 3 JSON files. The first contains the coordinates of the edges of the tiles on the tileset, another tells the program which tiles to draw under the player, and the last tells the program what to draw on top of the player. These three JSON files are used together to produce a 2D map:<br><img src=\"images/13.11.20/map.png\" style=\"max-width: 100%; min-width: 50%; margin-top: 5px;\"><br><small>Ignore the fact that this is really small, it just happened to be what I had loaded at the time of writing.</small><br>I know this is really unimpressive, but the amount of code required to create this may surprise you:<br><kbd>Map&nbsp;testMap&nbsp;=&nbsp;<span style=\"color: #33997E;\">new</span> Map(<span style=\"color: #7D4793;\">&quot;TestMap&quot;</span>);<br>Scene&nbsp;testMapScene&nbsp;=&nbsp;<span style=\"color: #33997E;\">new</span> Scene(testMap).setScale(5);</kbd><br>That's it. That's all you need. Everything else is done automatically. The JSON files that contain the actual map data are found, read and processed automatically based off of the name provided in the Map constructor.<br><br>I don't really know where I'm going with this post (or where it was going in the beginning to be honest), so I'm gonna end it here. If you fancy messing around with the code, you should be able to find it <a href=\"dls/13.11.20/ProcessingGameThing.zip\">here</a>."
		},
		{
			"number": "#2",
			"date": "16/10/2020",
			"title": "discord.js and <kbd>undefined</kbd>",
			"content": "I know this has nothing to do with normal JavaScript, but I somehow <i>always</i> manage to forget a <kbd>.cache</kbd> here and there. Then spending way too long trying to find out what's wrong with my code even when the issue's literally right in front of me. I wish JavaScript was more detailed with its errors - or that it threw errors in more places, like when <kbd>undefined</kbd> is assigned to a variable. I mean sure, it's useful every now and then, but makes debugging hell the rest of the time."
		},
        {
            "number": "#1",
            "date": "11/07/2020",
            "title": "I still slightly hate JavaScript",
            "content": "I'm still way too used to languages like Java and C# and keep accidentally putting things like <kbd>int</kbd> and <kbd>float</kbd> before variables. I swear I'm never gonna get used to not having to do that!"
        }
    ]
}